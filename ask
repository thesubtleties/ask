#!/bin/bash

# ask - AI CLI tool with Claude Code and OpenRouter support
# Usage: ask [OPTIONS] [PROMPT]

set -euo pipefail

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default values - check if Claude integration is available
if [ -f "/usr/local/bin/ask_claude.py" ] && command -v python3 &>/dev/null && command -v claude &>/dev/null; then
    USE_CLAUDE=true  # Claude is available and will be default
else
    USE_CLAUDE=false  # Claude not available, use OpenRouter
fi
CLAUDE_MODEL=""
OPENROUTER_MODEL=""
SYSTEM_PROMPT=""
PROMPT=""
STREAMING=false
NO_SYSTEM=false
PROVIDER_ORDER=""

# Default system prompt (direct answers)
DEFAULT_PROMPT="You are a direct answer engine. Output ONLY the requested information.

For commands: Output executable syntax only. No explanations, no comments.
For questions: Output the answer only. No context, no elaboration.

Rules:
- If asked for a command, provide ONLY the command
- If asked a question, provide ONLY the answer
- Never include markdown formatting or code blocks
- Never add explanatory text before or after
- Assume output will be piped or executed directly
- For multi-step commands, use && or ; to chain them
- Make commands robust and handle edge cases silently"

# Function to show help
show_help() {
    cat << EOF
ask - Query AI models via Claude Code or OpenRouter

Usage: ask [OPTIONS] [PROMPT]

Claude Code Options (default):
  (no flag)   Use default Claude model (set ASK_DEFAULT_MODEL or defaults to sonnet)
  -h          Force Claude Haiku (fast, lightweight)
  -s          Force Claude Sonnet (balanced - default)
  -o          Force Claude Opus (most capable)

OpenRouter Options:
  -m, --openrouter  Use OpenRouter Mercury Coder
  -g          Use OpenRouter Gemini 2.5 Flash
  -k          Use OpenRouter Kimi K2
  -q          Use OpenRouter Qwen 235B
  --model MODEL  Use custom OpenRouter model
  -r          Disable system prompt (OpenRouter only)

General Options:
  --stream    Enable streaming output (OpenRouter only)
  --system    Set custom system prompt
  --provider  OpenRouter: comma-separated list of providers
  --help      Show this help message

Configuration:
  Set default Claude model: export ASK_DEFAULT_MODEL=haiku|sonnet|opus
  Or create ~/.ask/config with: default_model=sonnet

Examples:
  ask "Write hello world in Python"          # Uses Claude (default model)
  ask -s "Explain quantum computing"         # Uses Claude Sonnet
  ask -m "What is 2+2?"                       # Uses OpenRouter Mercury
  echo "Fix this code" | ask                 # Pipe input to Claude
  ask --system "You are a pirate" "Tell me about sailing"

EOF
    exit 0
}

# Parse command line arguments
while [ $# -gt 0 ]; do
    case "$1" in
        --help) show_help ;;

        # Claude model flags
        -h)
            USE_CLAUDE=true
            CLAUDE_MODEL="haiku"
            shift ;;
        -s)
            USE_CLAUDE=true
            CLAUDE_MODEL="sonnet"
            shift ;;
        -o)
            USE_CLAUDE=true
            CLAUDE_MODEL="opus"
            shift ;;

        # OpenRouter flags
        -m|--openrouter)
            USE_CLAUDE=false
            OPENROUTER_MODEL="inception/mercury-coder:nitro"
            shift ;;
        -g)
            USE_CLAUDE=false
            OPENROUTER_MODEL="google/gemini-2.5-flash:nitro"
            shift ;;
        -k)
            USE_CLAUDE=false
            OPENROUTER_MODEL="moonshotai/kimi-k2:nitro"
            shift ;;
        -q)
            USE_CLAUDE=false
            OPENROUTER_MODEL="qwen/qwen3-235b-a22b-2507:nitro"
            shift ;;
        --model)
            USE_CLAUDE=false
            OPENROUTER_MODEL="${2:?Error: --model requires a model name}"
            shift 2 ;;

        # Common options
        -r)
            NO_SYSTEM=true
            shift ;;
        --stream)
            STREAMING=true
            shift ;;
        --system)
            SYSTEM_PROMPT="${2:?Error: --system requires a prompt}"
            shift 2 ;;
        --provider)
            PROVIDER_ORDER="${2:?Error: --provider requires providers}"
            shift 2 ;;
        *)
            PROMPT="$*"
            break ;;
    esac
done

# If no prompt provided as argument, read from stdin
if [ -z "$PROMPT" ]; then
    if [ -t 0 ]; then
        echo "Error: No prompt provided. Use 'ask --help' for help." >&2
        exit 1
    fi
    # Read all stdin, preserving multi-line format
    PROMPT=$(cat)
fi

# If no explicit model was selected and Claude isn't available, default to OpenRouter
if [ "$USE_CLAUDE" = true ] && [ -z "$CLAUDE_MODEL" ] && [ -z "$OPENROUTER_MODEL" ]; then
    # Double-check Claude is actually available
    if [ ! -f "/usr/local/bin/ask_claude.py" ] || ! command -v claude &>/dev/null; then
        USE_CLAUDE=false
        OPENROUTER_MODEL="inception/mercury-coder:nitro"  # Default OpenRouter model
    fi
fi

# Route to appropriate backend
if [ "$USE_CLAUDE" = true ]; then
    # Use Claude Code via Python wrapper

    # Check if Python wrapper exists
    if [ ! -f "$SCRIPT_DIR/ask_claude.py" ]; then
        echo "Error: ask_claude.py not found in $SCRIPT_DIR" >&2
        exit 1
    fi

    # Check if claude CLI is available
    if ! command -v claude &>/dev/null; then
        echo "Error: Claude CLI not found. Install with: npm install -g @anthropic-ai/claude-code" >&2
        exit 1
    fi

    # Build command
    CLAUDE_CMD=("python3" "$SCRIPT_DIR/ask_claude.py")

    # Add model if specified
    if [ -n "$CLAUDE_MODEL" ]; then
        CLAUDE_CMD+=("-m" "$CLAUDE_MODEL")
    fi

    # Add custom system prompt if provided
    if [ -n "$SYSTEM_PROMPT" ]; then
        CLAUDE_CMD+=("--system" "$SYSTEM_PROMPT")
    fi

    # Note: -r and --stream are not supported by Claude mode

    # Execute with prompt
    echo "$PROMPT" | "${CLAUDE_CMD[@]}"

else
    # Use OpenRouter (original behavior)

    # Check for API key
    if [ -z "${OPENROUTER_API_KEY:-}" ]; then
        echo "Error: OPENROUTER_API_KEY environment variable is not set" >&2
        echo "To use OpenRouter, export your API key or use Claude Code instead (default)" >&2
        exit 1
    fi

    # Apply default system prompt unless disabled or custom prompt provided
    if [ "$NO_SYSTEM" = false ] && [ -z "$SYSTEM_PROMPT" ]; then
        SYSTEM_PROMPT="$DEFAULT_PROMPT"
    fi

    # Build messages array with proper JSON escaping
    if [ -n "$SYSTEM_PROMPT" ]; then
        MESSAGES='[{"role":"system","content":'"$(printf '%s' "$SYSTEM_PROMPT" | jq -Rs .)"'},{"role":"user","content":'"$(printf '%s' "$PROMPT" | jq -Rs .)"'}]'
    else
        MESSAGES='[{"role":"user","content":'"$(printf '%s' "$PROMPT" | jq -Rs .)"'}]'
    fi

    # Record start time
    START_TIME=$(date +%s.%N)

    # Build JSON payload
    PROVIDER_JSON=""
    if [ -n "$PROVIDER_ORDER" ]; then
        PROVIDER_JSON=',"provider":{"order":['$(echo "$PROVIDER_ORDER" | awk -F, '{for(i=1;i<=NF;i++) printf "\"%s\"%s", $i, (i<NF?",":"")}')']}'
    fi

    JSON_PAYLOAD='{
        "model": "'"$OPENROUTER_MODEL"'",
        "messages": '"$MESSAGES"',
        "stream": '$([ "$STREAMING" = true ] && echo true || echo false)"$PROVIDER_JSON"'
    }'

    API_URL="https://openrouter.ai/api/v1/chat/completions"

    # Add newline before answer
    echo

    # Make API request
    if [ "$STREAMING" = true ]; then
        # Streaming mode
        curl -sS "$API_URL" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENROUTER_API_KEY" \
          -d "$JSON_PAYLOAD" 2>&1 | while IFS= read -r line; do
            # Check for errors
            if echo "$line" | grep -q '"error"'; then
                echo "Error: $(echo "$line" | jq -r '.error.message // .error // "Unknown error"')" >&2
                exit 1
            fi

            # Process SSE data lines
            if [[ "$line" == data:* ]]; then
                json="${line#data: }"
                [ "$json" = "" ] || [ "$json" = "[DONE]" ] && continue

                content=$(echo "$json" | jq -r '.choices[0].delta.content // ""' 2>/dev/null)
                [ -n "$content" ] && printf '%s' "$content"
            fi
        done
        echo

        # Show metadata
        ELAPSED=$(printf "%.2f" $(echo "$(date +%s.%N) - $START_TIME" | bc))
        echo
        echo "[$OPENROUTER_MODEL - ${ELAPSED}s]" >&2
    else
        # Non-streaming mode
        response=$(curl -sS "$API_URL" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENROUTER_API_KEY" \
          -d "$JSON_PAYLOAD" 2>&1)

        # Check for errors
        if echo "$response" | grep -q '"error"'; then
            echo "Error: $(echo "$response" | jq -r '.error.message // .error // "Unknown error"')" >&2
            exit 1
        fi

        # Extract and print content
        echo "$response" | jq -r '.choices[0].message.content // "No response received"'

        # Show metadata
        ELAPSED=$(printf "%.2f" $(echo "$(date +%s.%N) - $START_TIME" | bc))
        TOKENS=$(echo "$response" | jq -r '.usage.completion_tokens // 0')
        PROVIDER=$(echo "$response" | jq -r '.provider // "Unknown"')
        TPS=$(echo "scale=1; $TOKENS / $ELAPSED" | bc 2>/dev/null || echo "0.0")

        echo
        echo "[$OPENROUTER_MODEL via $PROVIDER - ${ELAPSED}s - ${TPS} tok/s]" >&2
    fi
fi